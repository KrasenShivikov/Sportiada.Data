// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sportiada.Data;
using System;

namespace Sportiada.Data.Migrations
{
    [DbContext(typeof(SportiadaDbContext))]
    [Migration("20180502153147_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.CompetitionAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssistantRef");

                    b.Property<string>("CompetitionAlpineSkiChief");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("DisciplineAlpineSkiId");

                    b.Property<string>("FinishRef");

                    b.Property<string>("FisTechnicalDelegate");

                    b.Property<int>("PlaceAlpineSkiId");

                    b.Property<string>("Referee");

                    b.Property<string>("Season");

                    b.Property<string>("StartRef");

                    b.Property<int>("TournamentId");

                    b.Property<string>("Track");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineAlpineSkiId");

                    b.HasIndex("PlaceAlpineSkiId");

                    b.HasIndex("TournamentId");

                    b.ToTable("CompetitionsAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.DisciplineAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DisciplinesAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.IntermediateAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Difference");

                    b.Property<int>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("PlaceAlpineSki");

                    b.Property<int>("ResultAlpineSkiId");

                    b.Property<string>("Speed");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ResultAlpineSkiId");

                    b.ToTable("IntermediatesAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.PlaceAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PlacesAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.ResultAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bib");

                    b.Property<int>("CompetitionAlpineSkiId");

                    b.Property<string>("Difference");

                    b.Property<string>("Metters");

                    b.Property<int>("PlaceAlpineSki");

                    b.Property<int>("SkierId");

                    b.Property<string>("Stage");

                    b.Property<int>("StartOrder");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionAlpineSkiId");

                    b.HasIndex("SkierId");

                    b.ToTable("ResultsAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.Skier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Club");

                    b.Property<int>("CountryId");

                    b.Property<string>("Gender");

                    b.Property<string>("LargePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SmallPicturePath");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Skiers");
                });

            modelBuilder.Entity("Sportiada.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LargePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("SmallPicturePath");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Sportiada.Data.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Sportiada.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sportiada.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sportiada.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sportiada.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.CompetitionAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Data.Models.AlpineSki.DisciplineAlpineSki", "Discipline")
                        .WithMany("Competitions")
                        .HasForeignKey("DisciplineAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Data.Models.AlpineSki.PlaceAlpineSki", "PlaceAlpineSki")
                        .WithMany("Competitions")
                        .HasForeignKey("PlaceAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Data.Models.Tournament", "Tournament")
                        .WithMany("Competitions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.IntermediateAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Data.Models.AlpineSki.ResultAlpineSki", "ResultAlpineSki")
                        .WithMany("IntermediatesAlpineSki")
                        .HasForeignKey("ResultAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.PlaceAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Data.Models.Country", "Country")
                        .WithMany("Places")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.ResultAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Data.Models.AlpineSki.CompetitionAlpineSki", "CompetitionsAlpineSki")
                        .WithMany("Results")
                        .HasForeignKey("CompetitionAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Data.Models.AlpineSki.Skier", "Skier")
                        .WithMany("ResultsAlpineSki")
                        .HasForeignKey("SkierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sportiada.Data.Models.AlpineSki.Skier", b =>
                {
                    b.HasOne("Sportiada.Data.Models.Country", "Country")
                        .WithMany("Skiers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
