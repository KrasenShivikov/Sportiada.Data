// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sportiada.Data;
using System;

namespace Sportiada.Data.Migrations
{
    [DbContext(typeof(SportiadaDbContext))]
    [Migration("20180904185049_Twenty")]
    partial class Twenty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.AlpineSkiDisciplines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AlpineSkiDisciplines");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.CompetitionAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssistantRef");

                    b.Property<string>("CompetitionAlpineSkiChief");

                    b.Property<int>("CompetitionTypeId");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("DisciplineAlpineSkiId");

                    b.Property<string>("FinishRef");

                    b.Property<string>("FisTechnicalDelegate");

                    b.Property<int>("PlaceAlpineSkiId");

                    b.Property<string>("Referee");

                    b.Property<int>("SeasonId");

                    b.Property<string>("StartRef");

                    b.Property<int>("TournamentId");

                    b.Property<string>("Track");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionTypeId");

                    b.HasIndex("DisciplineAlpineSkiId");

                    b.HasIndex("PlaceAlpineSkiId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TournamentId");

                    b.ToTable("CompetitionsAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.IntermediateAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Difference");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Place");

                    b.Property<int>("ResultAlpineSkiId");

                    b.Property<string>("Speed");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ResultAlpineSkiId");

                    b.ToTable("IntermediatesAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.PlaceAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PlacesAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.ResultAlpineSki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bib");

                    b.Property<int>("CompetitionAlpineSkiId");

                    b.Property<string>("Difference");

                    b.Property<string>("FinalTime");

                    b.Property<string>("Metters");

                    b.Property<int>("Place");

                    b.Property<int>("SkierId");

                    b.Property<string>("Stage");

                    b.Property<int>("StartOrder");

                    b.Property<string>("TimeFirstManch");

                    b.Property<string>("TimeSecondManch");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionAlpineSkiId");

                    b.HasIndex("SkierId");

                    b.ToTable("ResultsAlpineSki");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.Skier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Club");

                    b.Property<int>("CountryId");

                    b.Property<string>("Gender");

                    b.Property<string>("LargePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SmallPicturePath");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Skiers");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.CompetitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CompetitionTypes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LargePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("SmallPicturePath");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("FirstHalf");

                    b.Property<int>("GameStatisticId");

                    b.Property<int>("Minute");

                    b.Property<int>("PlayerId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("GameStatisticId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballCards");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.ToTable("FootballCardTypes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCoach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<int>("CountryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("FootballCoaches");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SeasonId");

                    b.Property<int>("TournamentId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballCompetitions");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attendance");

                    b.Property<DateTime>("Date");

                    b.Property<int>("RoundId");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("FootballGames");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGameReferee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameId");

                    b.Property<int>("RefereeId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballGameReferees");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGameStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BallPossession");

                    b.Property<int>("Corners");

                    b.Property<int>("Fouls");

                    b.Property<int>("GameId");

                    b.Property<int>("LineUpId");

                    b.Property<int>("Offsides");

                    b.Property<int>("ShotsOnTarget");

                    b.Property<int>("ShotsWide");

                    b.Property<int>("SideId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("SideId");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballGameStatistics");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGameStatisticType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("id");

                    b.ToTable("FootballGameStatisticTypes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssistanceId");

                    b.Property<bool>("FirstHalf");

                    b.Property<int>("GameStatisticId");

                    b.Property<int>("Minute");

                    b.Property<int>("PlayerId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("GameStatisticId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballGoals");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGoalAssistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GoalId");

                    b.Property<int>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("GoalId")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.ToTable("FootballGoalAssistances");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGoalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("picture");

                    b.HasKey("Id");

                    b.ToTable("FootballGoalTypes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballLineUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameStattisticId");

                    b.Property<int>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("GameStattisticId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FootballLineUps");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProfileName");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("FootballPlayers");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerCountry", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("CountryId");

                    b.Property<bool>("MainCountry");

                    b.HasKey("PlayerId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("FootballPlayerCountry");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("FirstHalf");

                    b.Property<int>("Minute");

                    b.Property<int>("PlayerId");

                    b.Property<int>("SubstituteId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SubstituteId")
                        .IsUnique();

                    b.ToTable("FootballPlayerIns");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("FirstHalf");

                    b.Property<int>("Minute");

                    b.Property<int>("PlayerId");

                    b.Property<int>("SubstituteId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SubstituteId")
                        .IsUnique();

                    b.ToTable("FootballPlayerOuts");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FootballPlayerTypes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballReferee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("FootballReferees");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballRefereeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FootballRefereeType");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballReserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameStattisticId");

                    b.Property<int>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("GameStattisticId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FootballReserves");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("FootballRounds");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SeasonId");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("FootballSides");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSideCoach", b =>
                {
                    b.Property<int>("CoachId");

                    b.Property<int>("SideId");

                    b.Property<DateTime?>("FromDate");

                    b.Property<DateTime?>("UntilDate");

                    b.HasKey("CoachId", "SideId");

                    b.HasIndex("SideId");

                    b.ToTable("FootballSideCoach");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSideline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameStatisticId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("ReasonId");

                    b.HasKey("Id");

                    b.HasIndex("GameStatisticId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReasonId");

                    b.ToTable("FootballSidelines");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSidelineReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.ToTable("FootballSidelineReasons");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSidePlayer", b =>
                {
                    b.Property<int>("SideId");

                    b.Property<int>("PlayerId");

                    b.Property<bool>("FirstTeam");

                    b.Property<DateTime?>("FromDate");

                    b.Property<bool>("OnLoan");

                    b.Property<int>("PlayerNumber");

                    b.Property<string>("PlayerPicture");

                    b.Property<bool>("Under18");

                    b.Property<bool>("Under23");

                    b.Property<DateTime?>("UntilDate");

                    b.HasKey("SideId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FootballSidePlayers");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballStadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("Architect");

                    b.Property<string>("Capacity");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("Facts");

                    b.Property<string>("Name");

                    b.Property<string>("Opened");

                    b.Property<string>("Phone");

                    b.Property<string>("PrevousNames");

                    b.Property<string>("Surface");

                    b.Property<int>("TeamId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("FootballStadium");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSubstitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameStatisticId");

                    b.Property<int>("PlayerInId");

                    b.Property<int>("PlayerOutId");

                    b.HasKey("Id");

                    b.HasIndex("GameStatisticId");

                    b.ToTable("FootballSubstitutes");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<string>("History");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FootballTeams");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballTournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("FootballTournamnets");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.CompetitionAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.CompetitionType", "CompetitionType")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.AlpineSki.AlpineSkiDisciplines", "Discipline")
                        .WithMany("Competitions")
                        .HasForeignKey("DisciplineAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.AlpineSki.PlaceAlpineSki", "PlaceAlpineSki")
                        .WithMany("Competitions")
                        .HasForeignKey("PlaceAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Season", "Season")
                        .WithMany("Competitions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Tournament", "Tournament")
                        .WithMany("Competitions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.IntermediateAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.AlpineSki.ResultAlpineSki", "ResultAlpineSki")
                        .WithMany("IntermediatesAlpineSki")
                        .HasForeignKey("ResultAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.PlaceAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("Places")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.ResultAlpineSki", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.AlpineSki.CompetitionAlpineSki", "CompetitionsAlpineSki")
                        .WithMany("Results")
                        .HasForeignKey("CompetitionAlpineSkiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.AlpineSki.Skier", "Skier")
                        .WithMany("ResultsAlpineSki")
                        .HasForeignKey("SkierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.AlpineSki.Skier", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("Skiers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.City", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCard", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "GameStatistic")
                        .WithMany("Cards")
                        .HasForeignKey("GameStatisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Cards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballCardType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCoach", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("FootballCoaches")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballCompetition", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Season", "Season")
                        .WithMany("FootballCompetitions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballTournament", "Tournament")
                        .WithMany("Competitions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.CompetitionType", "Type")
                        .WithMany("FootballCompetitions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGame", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballRound", "Round")
                        .WithMany("Games")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGameReferee", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGame", "Game")
                        .WithMany("Referees")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballReferee", "Referee")
                        .WithMany("GameReferees")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballRefereeType", "Type")
                        .WithMany("GameReferees")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGameStatistic", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGame", "Game")
                        .WithMany("GameStatistics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSide", "Side")
                        .WithMany("GameStatistics")
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatisticType", "Type")
                        .WithMany("GameStatistics")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGoal", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "GameStatistic")
                        .WithMany("Goals")
                        .HasForeignKey("GameStatisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGoalType", "Type")
                        .WithMany("Goals")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballGoalAssistance", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGoal", "Goal")
                        .WithOne("Assistance")
                        .HasForeignKey("Sportiada.Web.Data.Models.Football.FootballGoalAssistance", "GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("GoalAssistances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballLineUp", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "Gamestatistic")
                        .WithMany("LineUps")
                        .HasForeignKey("GameStattisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("LineUps")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayer", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayerType", "Type")
                        .WithMany("Players")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerCountry", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("FootballPlayers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Countries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerIn", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("PlayerIns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSubstitute", "Substitute")
                        .WithOne("PlayerIn")
                        .HasForeignKey("Sportiada.Web.Data.Models.Football.FootballPlayerIn", "SubstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballPlayerOut", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("PlayerOuts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSubstitute", "Substitute")
                        .WithOne("PlayerOut")
                        .HasForeignKey("Sportiada.Web.Data.Models.Football.FootballPlayerOut", "SubstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballReferee", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("FootballReferees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballReserve", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "Gamestatistic")
                        .WithMany("Reserves")
                        .HasForeignKey("GameStattisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Reserves")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballRound", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballCompetition", "Competition")
                        .WithMany("Rounds")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSide", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Season", "Season")
                        .WithMany("FootballSides")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballTeam", "Team")
                        .WithMany("Sides")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSideCoach", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballCoach", "Coach")
                        .WithMany("Sides")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSide", "Side")
                        .WithMany("Coaches")
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSideline", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "GameStatistic")
                        .WithMany("Sidelines")
                        .HasForeignKey("GameStatisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Sidelines")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSidelineReason", "Reason")
                        .WithMany("Sidelines")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSidePlayer", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballPlayer", "Player")
                        .WithMany("Sides")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballSide", "Side")
                        .WithMany("Players")
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballStadium", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballTeam", "Team")
                        .WithMany("Stadiums")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballSubstitute", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Football.FootballGameStatistic", "GameStatistic")
                        .WithMany("Substitutes")
                        .HasForeignKey("GameStatisticId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballTeam", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.City", "City")
                        .WithMany("FootballTeams")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sportiada.Web.Data.Models.Football.FootballTournament", b =>
                {
                    b.HasOne("Sportiada.Web.Data.Models.Country", "Country")
                        .WithMany("FootballTournaments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
